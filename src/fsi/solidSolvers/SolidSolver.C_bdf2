
/*
 * Author
 *   David Blom, TU Delft. All rights reserved.
 */

#include "SolidSolver.H"

SolidSolver::SolidSolver (
    string name,
    std::shared_ptr<argList> args,
    std::shared_ptr<Time> runTime
    )
    :
    foamSolidSolver( name, args, runTime ),
    gradU( fvc::grad( U ) ),
    epsilon
    (
    IOobject
    (
        "epsilonGreen",
        runTime->timeName(),
        mesh,
        IOobject::READ_IF_PRESENT,
        IOobject::AUTO_WRITE
    ),
    mesh,
    dimensionedSymmTensor( "zero", dimless, symmTensor::zero )
    ),
    sigma
    (
    IOobject
    (
        "sigma",
        runTime->timeName(),
        mesh,
        IOobject::READ_IF_PRESENT,
        IOobject::AUTO_WRITE
    ),
    mesh,
    dimensionedSymmTensor( "zero", dimForce / dimArea, symmTensor::zero )
    ),
    rheology( sigma, U ),
    rho( rheology.rho() ),
    mu( rheology.mu() ),
    lambda( rheology.lambda() ),
    muf( fvc::interpolate( mu, "mu" ) ),
    lambdaf( fvc::interpolate( lambda, "lambda" ) ),
    n( mesh.Sf() / mesh.magSf() ),
    V
    (
    IOobject
    (
        "V",
        runTime->timeName(),
        mesh,
        IOobject::READ_IF_PRESENT,
        IOobject::AUTO_WRITE
    ),
    fvc::ddt( U )
    ),
    minIter( 0 ),
    maxIter( 0 ),
    absoluteTolerance( 0 ),
    relativeTolerance( 0 ),
    couplingProperties
    (
    IOobject
    (
        "couplingProperties",
        runTime->constant(),
        mesh,
        IOobject::MUST_READ,
        IOobject::NO_WRITE
    )
    ),
    interpolator( false )
{
    const IOdictionary & fvSchemes = mesh.lookupObject<IOdictionary>( "fvSchemes" );
    const dictionary & ddtSchemes = fvSchemes.subDict( "ddtSchemes" );
    word ddtScheme;

    if ( ddtSchemes.found( "ddt(U)" ) )
        ddtScheme = word( ddtSchemes.lookup( "ddt(U)" ) );
    else
        ddtScheme = word( ddtSchemes.lookup( "default" ) );

    assert( ddtScheme == "bdf2" );
}

SolidSolver::SolidSolver (
    string name,
    std::shared_ptr<argList> args,
    std::shared_ptr<Time> runTime,
    std::shared_ptr<rbf::RBFCoarsening> interpolator
    )
    :
    foamSolidSolver( name, args, runTime ),
    gradU( fvc::grad( U ) ),
    epsilon
    (
    IOobject
    (
        "epsilonGreen",
        runTime->timeName(),
        mesh,
        IOobject::READ_IF_PRESENT,
        IOobject::AUTO_WRITE
    ),
    mesh,
    dimensionedSymmTensor( "zero", dimless, symmTensor::zero )
    ),
    sigma
    (
    IOobject
    (
        "sigma",
        runTime->timeName(),
        mesh,
        IOobject::READ_IF_PRESENT,
        IOobject::AUTO_WRITE
    ),
    mesh,
    dimensionedSymmTensor( "zero", dimForce / dimArea, symmTensor::zero )
    ),
    rheology( sigma, U ),
    rho( rheology.rho() ),
    mu( rheology.mu() ),
    lambda( rheology.lambda() ),
    muf( fvc::interpolate( mu, "mu" ) ),
    lambdaf( fvc::interpolate( lambda, "lambda" ) ),
    n( mesh.Sf() / mesh.magSf() ),
    V
    (
    IOobject
    (
        "V",
        runTime->timeName(),
        mesh,
        IOobject::READ_IF_PRESENT,
        IOobject::AUTO_WRITE
    ),
    fvc::ddt( U )
    ),
    minIter( 0 ),
    maxIter( 0 ),
    absoluteTolerance( 0 ),
    relativeTolerance( 0 ),
    couplingProperties
    (
    IOobject
    (
        "couplingProperties",
        runTime->constant(),
        mesh,
        IOobject::MUST_READ,
        IOobject::NO_WRITE
    )
    ),
    interpolator( interpolator )
{
    const IOdictionary & fvSchemes = mesh.lookupObject<IOdictionary>( "fvSchemes" );
    const dictionary & ddtSchemes = fvSchemes.subDict( "ddtSchemes" );
    word ddtScheme;

    if ( ddtSchemes.found( "ddt(U)" ) )
        ddtScheme = word( ddtSchemes.lookup( "ddt(U)" ) );
    else
        ddtScheme = word( ddtSchemes.lookup( "default" ) );

    assert( ddtScheme == "bdf2" );

    U.oldTime().oldTime();
    V.oldTime().oldTime();
}

SolidSolver::~SolidSolver()
{}

void SolidSolver::calculateEpsilonSigma()
{
    // - Green finite strain tensor
    epsilon = symm( gradU ) + 0.5 * symm( gradU & gradU.T() );

    // - second Piola-Kirchhoff stress tensor
    sigma = 2 * mu * epsilon + lambda * ( I * tr( epsilon ) );
}

void SolidSolver::initialize()
{
    readCouplingProperties();
}

void SolidSolver::initTimeStep()
{
    assert( !init );

    readSolidMechanicsControls();

    init = true;
}

bool SolidSolver::interpolateVolField( std::shared_ptr<BaseMultiLevelSolver> solver )
{
    std::shared_ptr<SolidSolver> fineModel;
    fineModel = std::dynamic_pointer_cast<SolidSolver>( solver );

    assert( fineModel );

    // Interpolate the displacement of the fineMesh onto the own
    // mesh

    Info << "Mesh to mesh volume interpolation of field U for the solid domain" << endl;

    const volVectorField & fieldSource = fineModel->mesh.lookupObject<volVectorField>( "U" );

    // Gather all the cell centers of the source

    labelList cellCentresSourceSize( Pstream::nProcs(), 0 );

    const Foam::vectorField & cellCentresSource = fineModel->mesh.cellCentres();

    cellCentresSourceSize[Pstream::myProcNo()] = cellCentresSource.size();

    // Reduce (gather, scatter) over procs

    reduce( cellCentresSourceSize, sumOp<labelList>() );

    assert( interpolator );

    if ( !interpolator->rbf->computed )
    {
        // Gather all the cell centers of the source

        const Foam::vectorField & cellCentresTarget = mesh.cellCentres();

        vectorField globalControlPoints( sum( cellCentresSourceSize ), Foam::vector::zero );

        label startIndex = 0;

        for ( int i = 0; i < Pstream::myProcNo(); i++ )
            startIndex += cellCentresSourceSize[i];

        for ( int i = 0; i < cellCentresSourceSize[Pstream::myProcNo()]; i++ )
            globalControlPoints[startIndex + i] = cellCentresSource[i];

        reduce( globalControlPoints, sumOp<vectorField>() );

        matrix positions( sum( cellCentresSourceSize ), 3 );
        matrix positionsInterpolation( cellCentresTarget.size(), 3 );

        for ( int i = 0; i < positions.rows(); i++ )
            for ( int j = 0; j < positions.cols(); j++ )
                positions( i, j ) = globalControlPoints[i][j];

        for ( int i = 0; i < positionsInterpolation.rows(); i++ )
            for ( int j = 0; j < positionsInterpolation.cols(); j++ )
                positionsInterpolation( i, j ) = cellCentresTarget[i][j];

        interpolator->compute( positions, positionsInterpolation );
    }

    vectorField globalFieldSource( fineModel->mesh.globalData().nTotalCells(), Foam::vector::zero );

    label startIndex = 0;

    for ( int i = 0; i < Pstream::myProcNo(); i++ )
        startIndex += cellCentresSourceSize[i];

    for ( int i = 0; i < cellCentresSourceSize[Pstream::myProcNo()]; i++ )
        globalFieldSource[startIndex + i] = fieldSource[i];

    reduce( globalFieldSource, sumOp<vectorField>() );

    // Initialize variables for interpolation

    matrix values( globalFieldSource.size(), 3 );
    matrix valuesInterpolation;

    for ( int i = 0; i < values.rows(); i++ )
        for ( int j = 0; j < values.cols(); j++ )
            values( i, j ) = globalFieldSource[i][j];

    interpolator->interpolate( values, valuesInterpolation );

    for ( int i = 0; i < valuesInterpolation.rows(); i++ )
        for ( int j = 0; j < valuesInterpolation.cols(); j++ )
            U[i][j] = valuesInterpolation( i, j );

    gradU = fvc::grad( U );

    calculateEpsilonSigma();

    return true;
}

bool SolidSolver::isRunning()
{
    runTime->write();

    Info << "ExecutionTime = " << runTime->elapsedCpuTime() << " s"
         << "  ClockTime = " << runTime->elapsedClockTime() << " s"
         << endl << endl;

    return runTime->loop();
}

void SolidSolver::readSolidMechanicsControls()
{
    const dictionary & stressControl =
        mesh.solutionDict().subDict( "solidMechanics" );

    minIter = readInt( stressControl.lookup( "minIter" ) );
    maxIter = readInt( stressControl.lookup( "maxIter" ) );
    absoluteTolerance = readScalar( stressControl.lookup( "tolerance" ) );
    relativeTolerance = readScalar( stressControl.lookup( "relTol" ) );

    // Ensure that the absolute tolerance of the linear solver is less
    // than the used convergence tolerance for the non-linear system.
    scalar linearTolerance = readScalar( mesh.solutionDict().subDict( "solvers" ).subDict( "U" ).lookup( "tolerance" ) );
    assert( linearTolerance < absoluteTolerance );
    assert( relativeTolerance < 1 );
    assert( absoluteTolerance > 0 );
    assert( absoluteTolerance < 1 );
    assert( minIter < maxIter );
    assert( maxIter > 0 );
    assert( minIter >= 0 );
}

void SolidSolver::resetSolution()
{
    U == U.oldTime();
    gradU = fvc::grad( U );
}

void SolidSolver::solve()
{
    Info << "Solve solid domain" << endl;

    scalar iCorr = 0;
    scalar displacementResidual = 1;
    scalar velocityResidual = 1;
    scalar residual = 1;
    scalar initialResidual = 1;
    lduMatrix::solverPerformance solverPerf;
    lduMatrix::debug = 0;
    scalar convergenceTolerance = absoluteTolerance;

    gradU = fvc::grad( U );

    calculateEpsilonSigma();

    dimensionedVector gravity( mesh.solutionDict().subDict( "solidMechanics" ).lookup( "gravity" ) );

    dimensionedScalar deltaT = runTime->deltaT();

    scalar T = 0.2;
    scalar Umax = 1;

    if ( runTime->time().value() < T )
    {
        Umax = 0.5 - std::cos( M_PI * runTime->time().value() / T ) / 2.0;
    }

    label timeIndex = runTime->timeIndex();

    for ( iCorr = 0; iCorr < maxIter; iCorr++ )
    {
        U.storePrevIter();
        V.storePrevIter();

        surfaceTensorField shearGradU =
            ( (I - n * n) & fvc::interpolate( gradU ) );

        if ( timeIndex == 1 )
        {
            fvVectorMatrix UEqn
            (
                rho * fvm::ddt( U )
                ==
                deltaT * (
                    fvm::laplacian( 2 * muf + lambdaf, U, "laplacian(DU,U)" )
                    + fvc::div(
                        mesh.magSf()
                        * (
                            -(muf + lambdaf) * ( fvc::snGrad( U ) & (I - n * n) )
                            + lambdaf * tr( shearGradU & (I - n * n) ) * n
                            + muf * (shearGradU & n)
                            + muf * ( n & fvc::interpolate( gradU & gradU.T() ) )
                            + 0.5 * lambdaf
                            * ( n * tr( fvc::interpolate( gradU & gradU.T() ) ) )
                            + ( n & fvc::interpolate( sigma & gradU ) )
                            )
                        )
                    )
                + rho * V.oldTime()
            );

            // Add gravity

            UEqn -= Umax * rho * deltaT * gravity;

            solverPerf = UEqn.solve();
        }
        else
        {
            fvVectorMatrix UEqn
            (
                rho * fvm::ddt( U )
                ==
                2.0 / 3.0 * deltaT * (
                    fvm::laplacian( 2 * muf + lambdaf, U, "laplacian(DU,U)" )
                    + fvc::div(
                        mesh.magSf()
                        * (
                            -(muf + lambdaf) * ( fvc::snGrad( U ) & (I - n * n) )
                            + lambdaf * tr( shearGradU & (I - n * n) ) * n
                            + muf * (shearGradU & n)
                            + muf * ( n & fvc::interpolate( gradU & gradU.T() ) )
                            + 0.5 * lambdaf
                            * ( n * tr( fvc::interpolate( gradU & gradU.T() ) ) )
                            + ( n & fvc::interpolate( sigma & gradU ) )
                            )
                        )
                    )
                + 4.0 / 3.0 * rho * V.oldTime()
                - 1.0 / 3.0 * rho * V.oldTime().oldTime()
            );

            // Add gravity

            UEqn -= 2.0 / 3.0 * Umax * rho * deltaT * gravity;

            solverPerf = UEqn.solve();
        }

        V = fvc::ddt( U );

        gradU = fvc::grad( U );

        calculateEpsilonSigma();

        displacementResidual = gSumMag( U.internalField() - U.prevIter().internalField() ) / (gSumMag( U.internalField() ) + SMALL);
        velocityResidual = gSumMag( V.internalField() - V.prevIter().internalField() ) / (gSumMag( V.internalField() ) + SMALL);
        residual = max( displacementResidual, solverPerf.initialResidual() );
        residual = max( residual, velocityResidual );

        if ( iCorr == 0 )
        {
            initialResidual = residual;
            convergenceTolerance = std::max( relativeTolerance * residual, absoluteTolerance );
            assert( convergenceTolerance > 0 );
            assert( convergenceTolerance < 1 );
        }

        bool convergence = residual <= convergenceTolerance && iCorr >= minIter - 1;

        if ( convergence )
            break;
    }

    lduMatrix::debug = 1;

    Info << "Solving for " << U.name();
    Info << ", Initial residual = " << initialResidual;
    Info << ", Final residual velocity = " << velocityResidual;
    Info << ", Final residual displacement = " << displacementResidual;
    Info << ", No outer iterations " << iCorr << endl;
}
